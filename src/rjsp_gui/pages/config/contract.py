import json
from typing import List, Dict

import matplotlib.pyplot as plt
import streamlit as st

from .utils import ensure_state
from .job import _timeline_html  # ← 시간축 시각화 재사용

# ────────────────────────────────────────────────
# 📈  Profit‑curve helper
# ────────────────────────────────────────────────

def profit_figure(prices: List[float], deadlines: List[int], penalties: List[float]):
    """Return a matplotlib Figure showing profit‑versus‑time lines."""
    if not prices:
        return None

    farthest = max(d + p / lp if lp else d for d, p, lp in zip(deadlines, prices, penalties))
    farthest = max(farthest * 1.05, 1)

    fig, ax = plt.subplots(figsize=(4, 3))
    for price, dl, pen in zip(prices, deadlines, penalties):
        ax.plot([0, dl], [price, price], linewidth=2)
        if pen > 0:
            x_end = dl + price / pen
            ax.plot([dl, x_end], [price, 0], linewidth=2)
    ax.set_xlim(0, farthest)
    ax.set_ylim(0, max(prices) * 1.1)
    ax.set_xlabel("Time")
    ax.set_ylabel("Expected Profit")
    ax.grid(True, linestyle="--", alpha=0.3)
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    return fig

# ────────────────────────────────────────────────
# 🖥️  Main UI
# ────────────────────────────────────────────────

def render_contract_config() -> None:
    ensure_state()
    st.header("Contract Configuration")

    if not st.session_state.job_templates:
        st.info("먼저 Job Template을 생성하세요.")
        return

    if "contracts" not in st.session_state:
        st.session_state.contracts = {}

    st.subheader("Job‑wise Contracts")

    for jt in st.session_state.job_templates:
        job_key = f"job_{jt['job_template_id']}"
        base_colour = jt.get("color", "#aaa")

        with st.expander(f"Job Template {jt['job_template_id']}", expanded=False):
            # ▣ 1) 시각적 타임라인 ------------------------------------------------
            ops = [
                next(o for o in st.session_state.operation_templates if o["operation_template_id"] == oid)
                for oid in jt["operation_template_sequence"]
            ]
            st.markdown(_timeline_html(ops, base_colour), unsafe_allow_html=True)

            # ▣ 2) 반복 횟수 ------------------------------------------------------
            repetitions = st.number_input(
                "Repetition", min_value=1, value=1, step=1, key=f"rep_{job_key}"
            )

            # ▣ 3) 개별 인스턴스 매개변수 입력 ------------------------------------
            st.markdown("**Instance parameters** (rows auto‑generated by repetition)")
            cols_head = st.columns(4)
            cols_head[0].markdown("**Instance**")
            cols_head[1].markdown("**Price**")
            cols_head[2].markdown("**Deadline**")
            cols_head[3].markdown("**Late penalty**")

            prices, deadlines, lps = [], [], []
            for i in range(repetitions):
                c0, c1, c2, c3 = st.columns(4)
                c0.markdown(str(i))
                prices.append(c1.number_input("price", min_value=0.0, value=1000.0, key=f"price_{job_key}_{i}"))
                deadlines.append(c2.number_input("deadline", min_value=1, value=10 + i, key=f"dl_{job_key}_{i}"))
                lps.append(c3.number_input("penalty", min_value=0.0, value=50.0, key=f"lp_{job_key}_{i}"))

            # ▣ 4) Profit curve ----------------------------------------------------
            fig = profit_figure(prices, deadlines, lps)
            if fig:
                st.pyplot(fig)

            # ▣ 5) Save ------------------------------------------------------------
            if st.button("Save above instances", key=f"save_{job_key}"):
                st.session_state.contracts[job_key] = [
                    {
                        "job_instance_id": i,
                        "price": prices[i],
                        "deadline": deadlines[i],
                        "late_penalty": lps[i],
                    }
                    for i in range(repetitions)
                ]
                st.success(f"Contract for {job_key} saved.")

    # ────────── Export JSON ──────────
    if st.session_state.contracts:
        st.divider()
        cfg = st.text_input("Config name", key="contract_cfg")
        ver = st.text_input("Version", "v1", key="contract_ver")
        contracts_json = json.dumps({"contracts": st.session_state.contracts}, indent=4)
        file_name_contracts = f"C-{cfg or 'default'}-{ver}.json"
        st.download_button(
            "Download contracts JSON",
            contracts_json,
            file_name=file_name_contracts,
            mime="application/json",
        )
